/*
* Polylib - Polygon Management Library
*
* Copyright (c) 2010-2011 VCAD System Research Program, RIKEN.
* All rights reserved.
*
* Copyright (c) 2012-2016 Advanced Institute for Computational Science, RIKEN.
* All rights reserved.
*
*/



SOFTWARE REQUIREMENT
====================
- MPI library
- Text parsing library
- Nagata Patch library ( Option )



HOW TO COMPILE
==============

(1) with configure

$ export FFV_HOME=hogehoge
$ cd BUILD_DIR
$ ../configure [options]
$ make
$ make check
$ make install


Generated archives are;
libPOLY.a/la/dylib    : serial version
libPOLYmpi.a/la/dylib : MPI version



Configure options:

 --host=hostname
    Specify in case of cross-compilation.

 --prefix=INSTALL_DIR
    Specify a directory to be installed. The default directory is /usr/local/Polylib.

 --with-mpich=MPICH_DIR
    If you will use the MPICH library, specify the directory that MPICH library is
    installed. Either --with-mpich or --with-ompi option will be required except using a
    wrapper compiler. If the wrapper compiler, e.g., mpic++ or mpicxx is used to compile,
    both options can be eliminated.

 --with-ompi=OPENMPI_DIR
    If the OpenMPI library is used, specify the directory path.

 --with-parser=TEXTPARSER_PATH
    Specify the directory path that is installed TextParser library.

 --with-npatch=NPATCHLIB_PATH
    Specify the directory path that is installed Nagata patch library.
    if Nagata patch library is not used, this option is not necessary.

 --with-real=(float|double)
    This option allows to specify the type of real variable. The default is float.

 --enable-example=(no|yes)
    Specify building example. The default is 'no'.

 --enable-test=(no|yes)
    Specify building tests. The default is 'no'.

 --enable-test_c=(no|yes)
    This option is to specify testing c interface. The default is no.

 --enable-test_fortran=(no|yes)
    This option is to specify testing fortran interface. The default is no.

 CC=C_COMPILER
    Specify a C compiler. It is to c interface testing.

 CFLAGS=C_OPTIONS
    Specify compiler options.

 CXX=CXX_COMPILER
    Specify a C++ compiler, e.g., g++, icpc, xlc++ or others.

 CXXFLAGS=CXX_OPTIONS
    Specify compiler options.

 F90=FORTRAN90_COMPILER
    Specify a fortran90 compiler. It is to fortran interface testing.

 F90FLAGS=FORTRAN90_OPTIONS
    Specify compiler options.

 LDFLAGS=LD_OPTIONS
    Specify linkage libraries.

2) Configure Examples

# Intel compiler

## Serial /wo example, /wo test, /wo fortran, /wo c,  single precision(default)
$ ../configure --prefix=${FFV_HOME}/Polylib \
               --with-parser=${FFV_HOME}/TextParser \
               --with-npatch=${FFV_HOME}/Npatch \
               CXX=icpc \
               CXXFLAGS="-O3 -Wall -fno-strict-aliasing"

## MPI

### MPICH with example, with test, with fortran, with c, double precision
$ ../configure --prefix=${FFV_HOME}/Polylib \
               --with-mpich=/usr/local/mpich \
               --with-parser=${FFV_HOME}/TextParser \
               --with-npatch=${FFV_HOME}/Npatch \
               --with-real=double \
               --enable-mpi=yes \
               --enable-example=yes \
               --enable-test=yes \
               --enable-test_fortran=yes \
               --enable-test_c=yes \
               CXX=icpc \
               CXXFLAGS="-O3 -Wall -fno-strict-aliasing" \
               CX=icc \
               CFLAGS="-O3 -Wall -fno-strict-aliasing" \
               F90=mpif90 \
               F90FLAGS="-O3 -Warn unused -fpp -openmp -qopt-report=5"


### OpenMPI with a wrapper compiler and /wo example, /wo test, /wo fortran, /wo c, single precision
$ ../configure --prefix=${FFV_HOME}/Polylib \
               --with-parser=${FFV_HOME}/TextParser \
               --with-npatch=${FFV_HOME}/Npatch \
               CXX=mpicxx \
               CXXFLAGS="-O3 -Wall -fno-strict-aliasing"



# GNU compiler

## Serial /wo example, single precision(default)
$ ../configure --prefix=${FFV_HOME}/Polylib \
               --with-parser=${FFV_HOME}/TextParser \
               --with-npatch=${FFV_HOME}/Npatch \
               --enable-example=no \
               CXX=g++ \
               CXXFLAGS="-O3 -Wall -fno-strict-aliasing"

## OpenMPI with a wrapper compiler and /wo example, /wo test, /wo c, single precision
$ ../configure --prefix=${FFV_HOME}/Polylib \
               --with-parser=${FFV_HOME}/TextParser \
               --with-npatch=${FFV_HOME}/Npatch \
               --enable-mpi=yes \
               --enable-test=yes \
               --enable-test_fortran=yes \
               CXX=mpicxx \
               CXXFLAGS="-O3 -Wall -fno-strict-aliasing"
               F90=mpif90 \
               F90FLAGS="-O3 -cpp"

## OpenMPI with a wrapper compiler and 
   /wo Nagata patch library, /wo example, /wo test, /wo c, single precision
$ ../configure --prefix=${FFV_HOME}/Polylib \
               --with-parser=${FFV_HOME}/TextParser \
               --enable-mpi=yes \
               --enable-test=yes \
               --enable-test_fortran=yes \
               CXX=mpicxx \
               CXXFLAGS="-O3 -Wall -fno-strict-aliasing"
               F90=mpif90 \
               F90FLAGS="-O3 -cpp"



# FUJITSU compiler / FX, K computer

## MPI
$ ../configure --prefix=${FFV_HOME}/Polylib \
               --with-parser=${FFV_HOME}/TextParser \
               --with-npatch=${FFV_HOME}/Npatch \
               --host=sparc64-unknown-linux-gnu \
               --enable-mpi=yes \
               --enable-test=yes \
               --enable-test_fortran=yes \
               CXX=mpiFCCpx \
               CXXFLAGS="-Kfast,ocl,preex,simd=2,parallel,openmp"
               F90=mpifrtpx \
               F90FLAGS="-Kfast,ocl,preex,simd=2,parallel,openmp -Cpp"


(2) with cmake for windows(Visual Studio)

- convert sources(*.h,*.cpp,*.cxx) to utf-8 bom(byte of marker) files
  for visual studio

    on linux/unix :
      $ ./bom_add.sh

    on windows :
      please, use tool ( ZiiDetector etc. )

- use cmake-gui.exe

    (setting parameters example)
      Name                        Value
     --------------------------------------------
      CMAKE_CONFIGURATION_TYPES   Release
      CMAKE_INSTALL_PREFIX        C:/FFV_HOME
      PL_CXX                      CC
      enable_example              yes
      enable_test                 yes
      with_msmpi                  C:/Program Files (x86)/Microsoft SDKs/MPI
      with_npatch                 C:/FFV_HOME/Npatch
      with_parser                 C:/FFV_HOME/TextParser

      ** install directory is C:¥FFV_HOME¥Npatch
      ** if Nagata patch library is not used, with_npatch is not necessary.

- build with Visual Studio



(3) Hand compile

If a provided configure does not work, use Makefile_hand to build this library. At first,
edit MACRO to tell your machine environment.

